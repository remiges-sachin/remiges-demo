// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkEmailExistsForUpdate = `-- name: CheckEmailExistsForUpdate :one
SELECT EXISTS(
    SELECT 1 FROM users WHERE email = $1 AND id != $2
) AS exists
`

type CheckEmailExistsForUpdateParams struct {
	Email string `db:"email" json:"email"`
	ID    int32  `db:"id" json:"id"`
}

func (q *Queries) CheckEmailExistsForUpdate(ctx context.Context, arg CheckEmailExistsForUpdateParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkEmailExistsForUpdate, arg.Email, arg.ID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkUsernameExists = `-- name: CheckUsernameExists :one
SELECT EXISTS(
    SELECT 1 FROM users WHERE username = $1
) AS exists
`

func (q *Queries) CheckUsernameExists(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRow(ctx, checkUsernameExists, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    name,
    email,
    username,
    created_at,
    updated_at,
    phone_number
) VALUES (
    $1, $2, $3, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, $4
) RETURNING id, name, email, username, phone_number, created_at, updated_at
`

type CreateUserParams struct {
	Name        string      `db:"name" json:"name"`
	Email       string      `db:"email" json:"email"`
	Username    string      `db:"username" json:"username"`
	PhoneNumber pgtype.Text `db:"phone_number" json:"phone_number"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Username,
		arg.PhoneNumber,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Username,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, username, phone_number, created_at, updated_at
FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Username,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
    name = COALESCE($2, name),
    email = COALESCE($3, email),
    phone_number = COALESCE($4, phone_number),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, name, email, username, phone_number, created_at, updated_at
`

type UpdateUserParams struct {
	ID          int32       `db:"id" json:"id"`
	Name        pgtype.Text `db:"name" json:"name"`
	Email       pgtype.Text `db:"email" json:"email"`
	PhoneNumber pgtype.Text `db:"phone_number" json:"phone_number"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.PhoneNumber,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Username,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
